include:  
  - local : /.gitlab/vars.yml
  - local : /.gitlab/jobs.yml

stages:
  - init
  - test
  - build
  - package
  - check
  - publish
  - deploy

workflow:
  rules:
    - when : always

.gradle-job:
  image:
    name: azul/zulu-openjdk:17-latest
  variables:
    GRADLE_USER_HOME: ${CI_PROJECT_DIR}/mill/.gradle-home
  cache: &global_cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - ${CI_PROJECT_DIR}/mill/.gradle
      - ${CI_PROJECT_DIR}/mill/.gradle-home

mill:init-version:
  stage: init
  extends: .init-next-version

mill:init-certs:
  stage: init
  extends: .init-dev-certs    

mill:unit-tests:
  extends: .gradle-job
  stage: test
  script:
    - echo $HOME
    - cd ${CI_PROJECT_DIR}/mill
    - ./gradlew --no-daemon --console plain clean test check
    - ls ${CI_PROJECT_DIR}/mill/.gradle-home
  needs:
    - job: mill:init-version
      artifacts: true
  artifacts:
    when: always
    expire_in: "15 days"
    reports:
      junit: ${CI_PROJECT_DIR}/mill/**/build/test-results/*/*.xml
      coverage_report:
        coverage_format: jacoco
        path: ${CI_PROJECT_DIR}/mill/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
    paths:
      - ${CI_PROJECT_DIR}/mill/**/build/test-results/*/*.xml
      - ${CI_PROJECT_DIR}/mill/**/build/test-results/*/*.xml

mill:install-dist:
  extends: .gradle-job
  stage: package
  needs:
    - job: mill:init-version
      artifacts: true
  script:
    - cd ${CI_PROJECT_DIR}/mill
    - ./gradlew --no-daemon --console plain clean installBootDist bootDistTar bootDistZip distTar distZip azureFunctionsPackage azureFunctionsPackageZip
  artifacts:
    expire_in: "5 days"
    paths:
      - ${CI_PROJECT_DIR}/mill/**/build/install/**/*
      - ${CI_PROJECT_DIR}/mill/**/build/distributions/*.tar
      - ${CI_PROJECT_DIR}/mill/**/build/distributions/*.zip
      - ${CI_PROJECT_DIR}/mill/**/build/install/*.tar
      - ${CI_PROJECT_DIR}/mill/**/build/install/*.zip
      - ${CI_PROJECT_DIR}/mill/**/build/azure-functions/**/*
      - ${CI_PROJECT_DIR}/mill/**/build/azure-functions/*.zip

mill:upload-packages:
  extends: .deploy-job
  stage: package
  needs:
    - job: mill:init-version
      artifacts: true
    - job: mill:install-dist
      artifacts: true
  script:
    - !reference [.global-vars, before_script]
    - BASE_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/mill-packages/${QP_VERSION}/"
    - >  
      curl --fail-with-body --output file.txt --header "JOB-TOKEN: ${CI_JOB_TOKEN}" 
      --upload-file ${CI_PROJECT_DIR}/mill/azure/mill-azure-calcite-backend-function/build/azure-functions/mill-calcite-backend-func.zip
      "${BASE_URL}/mill-calcite-backend-func.zip"
    - >
      curl --fail-with-body --output file.txt --header "JOB-TOKEN: ${CI_JOB_TOKEN}" 
      --upload-file "${CI_PROJECT_DIR}/mill/clients/mill-jdbc-shell/build/distributions/mill-jdbc-shell-${QP_VERSION}.tar"      
      "${BASE_URL}/mill-jdbc-shell-${QP_VERSION}.tar"
    - >
      curl --fail-with-body --output file.txt --header "JOB-TOKEN: ${CI_JOB_TOKEN}" 
      --upload-file "${CI_PROJECT_DIR}/mill/clients/mill-jdbc-shell/build/distributions/mill-jdbc-shell-${QP_VERSION}.zip"      
      "${BASE_URL}/mill-jdbc-shell-${QP_VERSION}.zip"


.calcite-backend-service-build-docker-image:
  extends: .docker-build-job
  variables:
    DOCKER_BUILD_CTX: ${CI_PROJECT_DIR}/mill/mill-calcite-backend-service
    DOCKER_BUILD_FILE: ${CI_PROJECT_DIR}/mill/mill-calcite-backend-service/src/main/docker/Dockerfile
    DOCKER_BUILD_CONTAINER_NAME : calcite-backend-service
  needs:
    - job: mill:install-dist
      artifacts: true
    - job: mill:unit-tests
      artifacts: false
    - job: mill:init-version
      artifacts: true

mill:calcite-backend:build-docker-local:
  extends: .calcite-backend-service-build-docker-image
  stage: package
  variables:
    DOCKER_LOCAL_ONLY: "true"

mill:azure-functions-test-docker-local:
  extends: .docker-build-job
  stage: package
  variables:
    DOCKER_LOCAL_ONLY: "true"
    DOCKER_BUILD_CTX: ${CI_PROJECT_DIR}/mill/azure/mill-azure-calcite-backend-function
    DOCKER_BUILD_FILE: ${CI_PROJECT_DIR}/mill/azure/mill-azure-calcite-backend-function/src/main/docker/Dockerfile
    DOCKER_BUILD_CONTAINER_NAME : azure-functions-test-host
  needs:
    - job: mill:install-dist
      artifacts: true
    - job: mill:unit-tests
      artifacts: false
    - job: mill:init-version
      artifacts: true

mill:calcite-backend:build-docker:
  extends: .calcite-backend-service-build-docker-image
  stage: publish


mill:jdbc-backend-service:build-docker:
  extends: .docker-build-job
  stage: publish
  variables:
    DOCKER_BUILD_CTX: ${CI_PROJECT_DIR}/mill/mill-jdbc-backend-service
    DOCKER_BUILD_FILE: ${CI_PROJECT_DIR}/mill/mill-jdbc-backend-service/src/main/docker/Dockerfile
    DOCKER_BUILD_CONTAINER_NAME : jdbc-backend-service
    DOCKER_BUILD_ARGS: "--build-arg MY=HJ"
  needs:
    - job: mill:install-dist
      artifacts: true
    - job: mill:unit-tests
      artifacts: false
    - job: mill:init-version
      artifacts: true

mill:calcite-test-backend:build-docker-local:
  stage: package
  extends: .docker-build-job
  before_script:
    - cp ${CI_PROJECT_DIR}/etc/certs/_\.local/cert.pem ${CI_PROJECT_DIR}/mill/clients/etc/test-backend-server/server.crt
    - cp ${CI_PROJECT_DIR}/etc/certs/_\.local/key.pem ${CI_PROJECT_DIR}/mill/clients/etc/test-backend-server/server.key
  script:
    - >
      /kaniko/executor
      --build-arg AZ_TID=$AZ_TEST_TENANT_ID
      --build-arg BASE_IMAGE=${CI_REGISTRY_IMAGE}/calcite-backend-service:${CI_COMMIT_REF_SLUG} 
      --context "${CI_PROJECT_DIR}/mill/clients/etc/test-backend-server" 
      --destination "${CI_REGISTRY_IMAGE}/clients-test-backend-server:${CI_COMMIT_REF_SLUG}"                
      --cache=true
  needs:
    - job: mill:init-certs
      artifacts: true
    - job: mill:calcite-backend:build-docker-local
      artifacts: false

sonarqube-check:
  extends: .gradle-job
  stage: check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/mill/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_TOKEN: ${SONAR_DELTA_TOKEN}
  needs: []
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd ${CI_PROJECT_DIR}/mill
    - ./gradlew --no-daemon --console plain clean test jacocoTestReport  jacocoTestReport sonar
  allow_failure: true
  only:
    - dev

mill:maven-publication-create:
  extends: .gradle-job
  stage: publish
  before_script:
    - echo -n "${SIGN_PGP_RING}" | base64 --decode > ${CI_PROJECT_DIR}/.keyring.kbx
  script:
    - cd ${CI_PROJECT_DIR}/mill
    - ./gradlew --no-daemon --console plain clean publish publishSonatypeBundle -Psigning.keyId=${SIGN_PGP_KEY_ID} -Psigning.password=${SIGN_PGP_PASS} -Psigning.secretKeyRingFile=${CI_PROJECT_DIR}/.keyring.kbx -Pgitlab_token=${CI_JOB_TOKEN}
  needs:
    - job: mill:init-version
      artifacts: true
  artifacts:
    expire_in: "5 days"
    paths:
      - ${CI_PROJECT_DIR}/mill/build/sonatype-bundle/**/*
      - ${CI_PROJECT_DIR}/mill/build/sonatype-bundle/*

mill:maven-publish:
  image: ${CI_IMAGE_BASE}
  stage: publish
  script:
    - !reference [.global-vars, before_script]
    - export SONATYPE_TOKEN=Authorization:\ Bearer\ $(echo -n $SONATYPE_USERNAME:$SONATYPE_PASSWORD | base64)
    - export SONATYPE_PUBLISHING_TYPE="USER_MANAGED"
    - |
        if [[ "main" == "${CI_COMMIT_REF_SLUG}" ]]
        then
          export SONATYPE_PUBLISHING_TYPE="AUTOMATIC"
        fi      
    - export SONATYPE_URL="https://central.sonatype.com/api/v1/publisher/upload?publishingType=${SONATYPE_PUBLISHING_TYPE}&name=mill-${QP_VERSION}-${CI_COMMIT_REF_SLUG}-$(date +%Y%m%d_%H%M%S)"
    - echo $SONATYPE_URL
    - curl -X POST -v --header "$SONATYPE_TOKEN" --form bundle=@${CI_PROJECT_DIR}/mill/build/sonatype-bundle/sonatype-bundle.zip $SONATYPE_URL
  needs:
    - job: mill:unit-tests
      artifacts: true
    - job: mill:maven-publication-create
      artifacts: true
    - job: mill:init-version
      artifacts: true
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_REF_SLUG != "dev"
      when: always

mill:deploy-infra:
  extends: .deploy-job
  stage: init
  variables:
    TF_DEPLOY_NAME: bck_func
    TF_DEPLOY_DIR: ${CI_PROJECT_DIR}/mill/deploy/azure-function-deployment
  script:
    - terraform -chdir=${TF_DEPLOY_DIR} init -backend-config=${TF_BACKEND_FILE}
    - terraform -chdir=${TF_DEPLOY_DIR} plan -var "subscription_id=${AZ_DEPLOY_SUBSCRIPTION_ID}" -var "app_name=${TF_DEPLOY_NAME}_${TF_SLUG}" -var "deployment_id=${TF_SLUG}"
    - terraform -chdir=${TF_DEPLOY_DIR} apply -auto-approve  -var "subscription_id=${AZ_DEPLOY_SUBSCRIPTION_ID}" -var "app_name=${TF_DEPLOY_NAME}_${TF_SLUG}"  -var "deployment_id=${TF_SLUG}"
    - terraform -chdir=${TF_DEPLOY_DIR} output -json > ${TF_DEPLOY_DIR}/.${TF_DEPLOY_NAME}.out.json
    - cat ${TF_DEPLOY_DIR}/.${TF_DEPLOY_NAME}.out.json
    - APP_NAME="$(cat $TF_DEPLOY_DIR/.${TF_DEPLOY_NAME}.out.json | jq -r '.app.value')"
    - RG_NAME="$(cat $TF_DEPLOY_DIR/.${TF_DEPLOY_NAME}.out.json | jq -r '.rg.value')"
    - echo $APP_NAME
    - echo $RG_NAME
  artifacts:
    paths:
      - ${TF_DEPLOY_DIR}/.${TF_DEPLOY_NAME}.out.json

mill:deploy-app:
  extends: .deploy-job
  stage: publish
  variables:
    TF_DEPLOY_NAME: bck_func
    TF_DEPLOY_DIR: ${CI_PROJECT_DIR}/mill/deploy/azure-function-deployment
  needs:
    - job: mill:deploy-infra
      artifacts: true
    - job: mill:install-dist
      artifacts: true
  script:
    - APP_NAME="$(cat $TF_DEPLOY_DIR/.${TF_DEPLOY_NAME}.out.json | jq -r '.app.value')"
    - RG_NAME="$(cat $TF_DEPLOY_DIR/.${TF_DEPLOY_NAME}.out.json | jq -r '.rg.value')"
    - az functionapp deployment source config-zip -g $RG_NAME -n $APP_NAME --src ${CI_PROJECT_DIR}/mill/azure/mill-azure-calcite-backend-function/build/azure-functions/mill-calcite-backend-func.zip
    - az functionapp cors add -g $RG_NAME -n $APP_NAME --allowed-origins https://myapps.com
    - ROOT_API_URL="$(az functionapp function list -g $RG_NAME -n $APP_NAME | jq -r '.[0].invokeUrlTemplate' | sed 's|\(.*\)/.*|\1|')/"
    - echo -n $ROOT_API_URL > $CI_PROJECT_DIR/mill/deploy/azure-function-deployment/.app.json
  artifacts:
    paths:
      - $CI_PROJECT_DIR/mill/deploy/azure-function-deployment/.app.json
  environment:
    name: mill/${CI_COMMIT_BRANCH}/backend_function
    url: $ROOT_API_URL
    on_stop: mill:destroy-infra

mill:destroy-infra:
  extends: .deploy-job
  stage: init
  variables:
    TF_DEPLOY_NAME: bck_func
    TF_DEPLOY_DIR: ${CI_PROJECT_DIR}/mill/deploy/azure-function-deployment
  script:
    - terraform -chdir=${TF_DEPLOY_DIR} init -backend-config=${TF_BACKEND_FILE}
    - terraform -chdir=${TF_DEPLOY_DIR} plan -destroy var "subscription_id=${AZ_DEPLOY_SUBSCRIPTION_ID}" -var "app_name=${TF_DEPLOY_NAME}_${TF_SLUG}" -var "deployment_id=${TF_SLUG}"
    - terraform -chdir=${TF_DEPLOY_DIR} destroy -auto-approve  var "subscription_id=${AZ_DEPLOY_SUBSCRIPTION_ID}" -var "app_name=${TF_DEPLOY_NAME}_${TF_SLUG}" -var "deployment_id=${TF_SLUG}"
  when: manual
  environment:
    name: mill/${CI_COMMIT_BRANCH}/backend_function
    action: stop