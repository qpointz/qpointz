<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="21" skipped="0" tests="28" time="6.606" timestamp="2024-10-25T12:37:42.994090+02:00" hostname="ostrich2-lnx"><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_empty_query_returns_schema" time="0.014"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_empty_query_returns_schema&gt;

    def test_empty_query_returns_schema(self):
        with self.__client__() as c:
            query = self.__valid_sql + " WHERE " + self.__empty_query_predicate or " 1 = 2 "
            q = c.sql_query(sql = query, fetch_size = 10)
&gt;           df = q.to_pandas()

tests/clients_base_test.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:63: in to_pandas
    return self.__event_loop__().run_until_complete(self.to_pandas_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:57: in to_pandas_async
    record_batches = await self.record_batches_async()
millclient/client.py:51: in record_batches_async
    return await stream.list(self.record_batches())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:47: in record_batches
    async for response in self.responses():
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/proto/io/qpointz/mill/__init__.py:379: in exec_query
    async for response in self._unary_stream(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:107: in _unary_stream
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_exec_query" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_exec_query&gt;

    def test_exec_query(self):
        with self.__client__() as c:
&gt;           l = c.exec_query_fetch(sql = self.__valid_sql, fetch_size = 10)

tests/clients_base_test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:149: in exec_query_fetch
    return self.__event_loop.run_until_complete(self.exec_query_async(request, **kwarg))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:146: in exec_query_async
    return await stream.list(self.exec_query(request=request, **kwarg))
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/proto/io/qpointz/mill/__init__.py:379: in exec_query
    async for response in self._unary_stream(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:107: in _unary_stream
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_get_scema_pass_request" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_get_scema_pass_request&gt;

    def test_get_scema_pass_request(self):
        with self.__client__() as c:
            req = GetSchemaRequest(schema_name=self.__schema_name)
&gt;           r = c.get_schema(request=req)

tests/clients_base_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:117: in get_schema
    return self.__event_loop.run_until_complete(self.get_schema_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:181: in get_schema_async
    return await self.__svc.get_schema(req)
millclient/proto/io/qpointz/mill/__init__.py:345: in get_schema
    return await self._unary_unary(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:84: in _unary_unary
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_get_schema" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_get_schema&gt;

    def test_get_schema(self):
        with self.__client__() as c:
&gt;           r = c.get_schema(schema_name=self.__schema_name)

tests/clients_base_test.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:117: in get_schema
    return self.__event_loop.run_until_complete(self.get_schema_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:181: in get_schema_async
    return await self.__svc.get_schema(req)
millclient/proto/io/qpointz/mill/__init__.py:345: in get_schema
    return await self._unary_unary(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:84: in _unary_unary
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_handshake" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_handshake&gt;

    def test_handshake(self):
        with self.__client__() as c:
&gt;           r = c.handshake()

tests/clients_base_test.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:95: in handshake
    return self.__event_loop.run_until_complete(self.handshake_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:172: in handshake_async
    return await self.__svc.handshake(handshake_request=req)
millclient/proto/io/qpointz/mill/__init__.py:311: in handshake
    return await self._unary_unary(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:84: in _unary_unary
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_list_schemas" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_list_schemas&gt;

    def test_list_schemas(self):
        with self.__client__() as c:
&gt;           r = c.list_schemas()

tests/clients_base_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:103: in list_schemas
    return self.__event_loop.run_until_complete(self.list_schemas_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:175: in list_schemas_async
    return await self.__svc.list_schemas(req)
millclient/proto/io/qpointz/mill/__init__.py:328: in list_schemas
    return await self._unary_unary(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:84: in _unary_unary
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_query_record_batches" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_query_record_batches&gt;

    def test_query_record_batches(self):
        with self.__client__() as c:
            q = self.trivia(c)
&gt;           l = q.record_batches_fetch()

tests/clients_base_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:54: in record_batches_fetch
    return self.__event_loop__().run_until_complete(self.record_batches_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:51: in record_batches_async
    return await stream.list(self.record_batches())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:47: in record_batches
    async for response in self.responses():
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/proto/io/qpointz/mill/__init__.py:379: in exec_query
    async for response in self._unary_stream(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:107: in _unary_stream
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_query_to_pandas" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_query_to_pandas&gt;

    def test_query_to_pandas(self):
        with self.__client__() as c:
            q = c.sql_query(sql = self.__valid_sql)
&gt;           df = q.to_pandas()

tests/clients_base_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:63: in to_pandas
    return self.__event_loop__().run_until_complete(self.to_pandas_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:57: in to_pandas_async
    record_batches = await self.record_batches_async()
millclient/client.py:51: in record_batches_async
    return await stream.list(self.record_batches())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:47: in record_batches
    async for response in self.responses():
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/proto/io/qpointz/mill/__init__.py:379: in exec_query
    async for response in self._unary_stream(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:107: in _unary_stream
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_schema_doesnt_exist" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_schema_doesnt_exist&gt;

    def test_schema_doesnt_exist(self):
        with self.__client__() as c:
&gt;           self.assertRaises(MillServerError, c.get_schema, schema_name="airlines-not-exists")

tests/clients_base_test.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:117: in get_schema
    return self.__event_loop.run_until_complete(self.get_schema_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:181: in get_schema_async
    return await self.__svc.get_schema(req)
millclient/proto/io/qpointz/mill/__init__.py:345: in get_schema
    return await self._unary_unary(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:84: in _unary_unary
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_grpc.MillGrpcClientTests" name="test_sql_querty_trivial" time="0.002"><failure message="ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)">self = &lt;tests.test_client_grpc.MillGrpcClientTests testMethod=test_sql_querty_trivial&gt;

    def test_sql_querty_trivial(self):
        with self.__client__() as c:
            q = c.sql_query(sql = self.__valid_sql, fetch_size = 10)
&gt;           l = q.responses_fetch()

tests/clients_base_test.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:44: in responses_fetch
    return self.__event_loop__().run_until_complete(self.responses_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:41: in responses_async
    return await stream.list(self.responses())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/proto/io/qpointz/mill/__init__.py:379: in exec_query
    async for response in self._unary_stream(
.venv/lib/python3.11/site-packages/betterproto/grpc/grpclib_client.py:107: in _unary_stream
    await stream.send_message(request, end=True)
.venv/lib/python3.11/site-packages/grpclib/client.py:241: in send_message
    await self.send_request()
.venv/lib/python3.11/site-packages/grpclib/client.py:173: in send_request
    protocol = await self._channel.__connect__()
.venv/lib/python3.11/site-packages/grpclib/client.py:748: in __connect__
    self._protocol = await self._create_connection()
.venv/lib/python3.11/site-packages/grpclib/client.py:725: in _create_connection
    _, protocol = await self._loop.create_connection(
/usr/lib/python3.11/asyncio/base_events.py:1073: in create_connection
    raise exceptions[0]
/usr/lib/python3.11/asyncio/base_events.py:1058: in create_connection
    sock = await self._connect_sock(
/usr/lib/python3.11/asyncio/base_events.py:964: in _connect_sock
    await self.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 9099)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 9099)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 9099)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_empty_query_returns_schema" time="0.006"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569dcf210&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569dcc910&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_empty_query_returns_schema&gt;

    def test_empty_query_returns_schema(self):
        with self.__client__() as c:
            query = self.__valid_sql + " WHERE " + self.__empty_query_predicate or " 1 = 2 "
            q = c.sql_query(sql = query, fetch_size = 10)
&gt;           df = q.to_pandas()

tests/clients_base_test.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:63: in to_pandas
    return self.__event_loop__().run_until_complete(self.to_pandas_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:57: in to_pandas_async
    record_batches = await self.record_batches_async()
millclient/client.py:51: in record_batches_async
    return await stream.list(self.record_batches())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:47: in record_batches
    async for response in self.responses():
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/client.py:251: in __anext__
    resp = await self.__session.post("SubmitQuery", self.__request, QueryResultResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569dcf210&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569dcc910&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_exec_query" time="0.003"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569d0db10&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569d0c410&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_exec_query&gt;

    def test_exec_query(self):
        with self.__client__() as c:
&gt;           l = c.exec_query_fetch(sql = self.__valid_sql, fetch_size = 10)

tests/clients_base_test.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:149: in exec_query_fetch
    return self.__event_loop.run_until_complete(self.exec_query_async(request, **kwarg))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:146: in exec_query_async
    return await stream.list(self.exec_query(request=request, **kwarg))
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/client.py:251: in __anext__
    resp = await self.__session.post("SubmitQuery", self.__request, QueryResultResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569d0db10&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569d0c410&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_get_scema_pass_request" time="0.003"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569ddcfd0&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569ddcf50&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_get_scema_pass_request&gt;

    def test_get_scema_pass_request(self):
        with self.__client__() as c:
            req = GetSchemaRequest(schema_name=self.__schema_name)
&gt;           r = c.get_schema(request=req)

tests/clients_base_test.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:117: in get_schema
    return self.__event_loop.run_until_complete(self.get_schema_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:235: in get_schema_async
    return await self.__session.post("GetSchema", req, GetSchemaResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569ddcfd0&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569ddcf50&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_get_schema" time="0.002"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x70456a73e590&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x70456a7ed150&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_get_schema&gt;

    def test_get_schema(self):
        with self.__client__() as c:
&gt;           r = c.get_schema(schema_name=self.__schema_name)

tests/clients_base_test.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:117: in get_schema
    return self.__event_loop.run_until_complete(self.get_schema_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:235: in get_schema_async
    return await self.__session.post("GetSchema", req, GetSchemaResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x70456a73e590&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x70456a7ed150&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_handshake" time="0.004"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569b32d10&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569b30410&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_handshake&gt;

    def test_handshake(self):
        with self.__client__() as c:
&gt;           r = c.handshake()

tests/clients_base_test.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:95: in handshake
    return self.__event_loop.run_until_complete(self.handshake_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:229: in handshake_async
    return await self.__session.post("Handshake", req, HandshakeResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569b32d10&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569b30410&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_list_schemas" time="0.002"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569a8f910&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569a8ed50&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_list_schemas&gt;

    def test_list_schemas(self):
        with self.__client__() as c:
&gt;           r = c.list_schemas()

tests/clients_base_test.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:103: in list_schemas
    return self.__event_loop.run_until_complete(self.list_schemas_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:232: in list_schemas_async
    return await self.__session.post("ListSchemas", req, ListSchemasResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569a8f910&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569a8ed50&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_query_record_batches" time="0.004"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x70456a630850&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x70456a630110&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_query_record_batches&gt;

    def test_query_record_batches(self):
        with self.__client__() as c:
            q = self.trivia(c)
&gt;           l = q.record_batches_fetch()

tests/clients_base_test.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:54: in record_batches_fetch
    return self.__event_loop__().run_until_complete(self.record_batches_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:51: in record_batches_async
    return await stream.list(self.record_batches())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:47: in record_batches
    async for response in self.responses():
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/client.py:251: in __anext__
    resp = await self.__session.post("SubmitQuery", self.__request, QueryResultResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x70456a630850&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x70456a630110&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_query_to_pandas" time="0.003"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569d0ce50&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569d0ef90&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_query_to_pandas&gt;

    def test_query_to_pandas(self):
        with self.__client__() as c:
            q = c.sql_query(sql = self.__valid_sql)
&gt;           df = q.to_pandas()

tests/clients_base_test.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:63: in to_pandas
    return self.__event_loop__().run_until_complete(self.to_pandas_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:57: in to_pandas_async
    record_batches = await self.record_batches_async()
millclient/client.py:51: in record_batches_async
    return await stream.list(self.record_batches())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:47: in record_batches
    async for response in self.responses():
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/client.py:251: in __anext__
    resp = await self.__session.post("SubmitQuery", self.__request, QueryResultResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569d0ce50&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569d0ef90&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_schema_doesnt_exist" time="0.002"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_schema_doesnt_exist&gt;

    def test_schema_doesnt_exist(self):
        with self.__client__() as c:
&gt;           self.assertRaises(MillServerError, c.get_schema, schema_name="airlines-not-exists")

tests/clients_base_test.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:117: in get_schema
    return self.__event_loop.run_until_complete(self.get_schema_async(req))
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:235: in get_schema_async
    return await self.__session.post("GetSchema", req, GetSchemaResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_client_http.MillHttpClientTests" name="test_sql_querty_trivial" time="0.003"><failure message="aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]">self = &lt;aiohttp.connector.TCPConnector object at 0x704569ddc510&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569ddf750&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
&gt;               sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1091: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:104: in start_connection
    raise first_exception
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:82: in start_connection
    sock = await _connect_sock(
.venv/lib/python3.11/site-packages/aiohappyeyeballs/impl.py:174: in _connect_sock
    await loop.sock_connect(sock, address)
/usr/lib/python3.11/asyncio/selector_events.py:633: in sock_connect
    return await fut
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;, fut = &lt;Future finished exception=ConnectionRefusedError(111, "Connect call failed ('127.0.0.1', 7071)")&gt;, sock = &lt;socket.socket [closed] fd=-1, family=2, type=1, proto=6&gt;
address = ('127.0.0.1', 7071)

    def _sock_connect_cb(self, fut, sock, address):
        if fut.done():
            return
    
        try:
            err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
            if err != 0:
                # Jump to any except clause below.
&gt;               raise OSError(err, f'Connect call failed {address}')
E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 7071)

/usr/lib/python3.11/asyncio/selector_events.py:668: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = &lt;tests.test_client_http.MillHttpClientTests testMethod=test_sql_querty_trivial&gt;

    def test_sql_querty_trivial(self):
        with self.__client__() as c:
            q = c.sql_query(sql = self.__valid_sql, fetch_size = 10)
&gt;           l = q.responses_fetch()

tests/clients_base_test.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
millclient/client.py:44: in responses_fetch
    return self.__event_loop__().run_until_complete(self.responses_async())
/usr/lib/python3.11/asyncio/base_events.py:650: in run_until_complete
    return future.result()
millclient/client.py:41: in responses_async
    return await stream.list(self.responses())
.venv/lib/python3.11/site-packages/aiostream/core.py:65: in wait_stream
    async for item in streamer:
.venv/lib/python3.11/site-packages/aiostream/stream/aggregate.py:89: in list
    async for item in streamer:
millclient/client.py:275: in responses
    async for response in self.__client.exec_query(request=self.__request):
millclient/client.py:140: in exec_query
    async for response in iter:
millclient/client.py:251: in __anext__
    resp = await self.__session.post("SubmitQuery", self.__request, QueryResultResponse())
millclient/client.py:193: in post
    resp = await self.__session.post(f"{self.__base_url}{command}", data=req.to_json())
.venv/lib/python3.11/site-packages/aiohttp/client.py:663: in _request
    conn = await self._connector.connect(
.venv/lib/python3.11/site-packages/aiohttp/connector.py:563: in connect
    proto = await self._create_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1032: in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1366: in _create_direct_connection
    raise last_exc
.venv/lib/python3.11/site-packages/aiohttp/connector.py:1335: in _create_direct_connection
    transp, proto = await self._wrap_create_connection(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;aiohttp.connector.TCPConnector object at 0x704569ddc510&gt;, addr_infos = [], req = &lt;aiohttp.client_reqrep.ClientRequest object at 0x704569ddf750&gt;
timeout = ClientTimeout(total=300, connect=None, sock_read=None, sock_connect=30, ceil_threshold=5), client_error = &lt;class 'aiohttp.client_exceptions.ClientConnectorError'&gt;
args = (functools.partial(&lt;class 'aiohttp.client_proto.ResponseHandler'&gt;, loop=&lt;_UnixSelectorEventLoop running=False closed=False debug=False&gt;),), kwargs = {'server_hostname': None, 'ssl': None}

    async def _wrap_create_connection(
        self,
        *args: Any,
        addr_infos: List[aiohappyeyeballs.AddrInfoType],
        req: ClientRequest,
        timeout: "ClientTimeout",
        client_error: Type[Exception] = ClientConnectorError,
        **kwargs: Any,
    ) -&gt; Tuple[asyncio.Transport, ResponseHandler]:
        try:
            async with ceil_timeout(
                timeout.sock_connect, ceil_threshold=timeout.ceil_threshold
            ):
                sock = await aiohappyeyeballs.start_connection(
                    addr_infos=addr_infos,
                    local_addr_infos=self._local_addr_infos,
                    happy_eyeballs_delay=self._happy_eyeballs_delay,
                    interleave=self._interleave,
                    loop=self._loop,
                )
                return await self._loop.create_connection(*args, **kwargs, sock=sock)
        except cert_errors as exc:
            raise ClientConnectorCertificateError(req.connection_key, exc) from exc
        except ssl_errors as exc:
            raise ClientConnectorSSLError(req.connection_key, exc) from exc
        except OSError as exc:
            if exc.errno is None and isinstance(exc, asyncio.TimeoutError):
                raise
&gt;           raise client_error(req.connection_key, exc) from exc
E           aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host localhost:7071 ssl:default [Connect call failed ('127.0.0.1', 7071)]

.venv/lib/python3.11/site-packages/aiohttp/connector.py:1106: ClientConnectorError</failure></testcase><testcase classname="tests.test_connect.MillConnectTests" name="test_connect_secure" time="0.001"><failure message="FileNotFoundError: [Errno 2] No such file or directory">self = &lt;tests.test_connect.MillConnectTests testMethod=test_connect_secure&gt;

    def test_connect_secure(self):
&gt;       host, port, ssl_context = self.mill_host_params()

tests/test_connect.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_connect.py:14: in mill_host_params
    ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=ca_file)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

purpose = &lt;Purpose.SERVER_AUTH: _ASN1Object(nid=129, shortname='serverAuth', longname='TLS Web Server Authentication', oid='1.3.6.1.5.5.7.3.1')&gt;

    def create_default_context(purpose=Purpose.SERVER_AUTH, *, cafile=None,
                               capath=None, cadata=None):
        """Create a SSLContext object with default settings.
    
        NOTE: The protocol and settings may change anytime without prior
              deprecation. The values represent a fair balance between maximum
              compatibility and security.
        """
        if not isinstance(purpose, _ASN1Object):
            raise TypeError(purpose)
    
        # SSLContext sets OP_NO_SSLv2, OP_NO_SSLv3, OP_NO_COMPRESSION,
        # OP_CIPHER_SERVER_PREFERENCE, OP_SINGLE_DH_USE and OP_SINGLE_ECDH_USE
        # by default.
        if purpose == Purpose.SERVER_AUTH:
            # verify certs and host name in client mode
            context = SSLContext(PROTOCOL_TLS_CLIENT)
            context.verify_mode = CERT_REQUIRED
            context.check_hostname = True
        elif purpose == Purpose.CLIENT_AUTH:
            context = SSLContext(PROTOCOL_TLS_SERVER)
        else:
            raise ValueError(purpose)
    
        if cafile or capath or cadata:
&gt;           context.load_verify_locations(cafile, capath, cadata)
E           FileNotFoundError: [Errno 2] No such file or directory

/usr/lib/python3.11/ssl.py:770: FileNotFoundError</failure></testcase><testcase classname="tests.test_create_client.MillConnectTests" name="test_create_grpc_client" time="0.001" /><testcase classname="tests.test_create_client.MillConnectTests" name="test_create_http_client_by_host" time="0.001" /><testcase classname="tests.test_create_client.MillConnectTests" name="test_create_http_client_by_host_no_port" time="0.001" /><testcase classname="tests.test_create_client.MillConnectTests" name="test_create_http_no_base_path_as_spec" time="0.001" /><testcase classname="tests.test_create_client.MillConnectTests" name="test_create_http_no_base_path_to_default" time="0.001" /><testcase classname="tests.test_create_client.MillConnectTests" name="test_http_std" time="0.001" /><testcase classname="tests.test_type_support.MillClientTests" name="test_converters" time="0.030" /></testsuite></testsuites>