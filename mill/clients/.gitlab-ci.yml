include:
  - local : /.gitlab/vars.yml
  - local : /.gitlab/jobs.yml

image: azul/zulu-openjdk:17-latest

stages:
  - init  
  - test
  - build
  - publish

workflow:
  rules:
    - when : always

mill-clients:init-version:
  stage: init
  extends: .init-next-version  

mill-clients:init-certs:
  stage: init
  extends: .init-dev-certs  

init:build-test-backend-service:
  stage: init
  extends: .docker-build-job
  before_script:
    - cp ${CI_PROJECT_DIR}/etc/certs/_\.local/cert.pem ${CI_PROJECT_DIR}/mill/clients/etc/test-backend-server/server.crt
    - cp ${CI_PROJECT_DIR}/etc/certs/_\.local/key.pem ${CI_PROJECT_DIR}/mill/clients/etc/test-backend-server/server.key
  script:
      - >
        /kaniko/executor
        --build-arg AZ_TID=$AZ_TEST_TENANT_ID
        --build-arg BASE_IMAGE=${CI_REGISTRY_IMAGE}/calcite-backend-service:${CI_COMMIT_REF_SLUG} 
        --context "${CI_PROJECT_DIR}/mill/clients/etc/test-backend-server" 
        --destination "${CI_REGISTRY_IMAGE}/clients-test-backend-server:${CI_COMMIT_REF_SLUG}"                
        --cache=true      
  needs:
    - job: mill-clients:init-certs
      artifacts: true

mill:init-az-login:
  stage: init
  image: mcr.microsoft.com/azure-cli:cbl-mariner2.0  
  script:
    - az config set core.only_show_errors=yes
    - az login --service-principal -u ${AZ_TEST_SPN} --password ${AZ_TEST_SPN_SECRET} --tenant ${AZ_TEST_TENANT_ID} --allow-no-subscription
    - AZ_TOKEN=$(az account get-access-token --scope ${AZ_TEST_SCOPE}/.default --query "accessToken" --output tsv)
    - echo -n $AZ_TOKEN > ${CI_PROJECT_DIR}/etc/.test_az_token    
  artifacts:    
    expire_in: "1 days"
    paths:
      - ${CI_PROJECT_DIR}/etc/.test_az_token

.mill:client-test:
  stage: test
  image: azul/zulu-openjdk:17-latest
  services:
    - name: ${CI_REGISTRY_IMAGE}/clients-test-backend-server:${CI_COMMIT_REF_SLUG}
      pull_policy: always
      #variables:
        #SPRING_PROFILES_ACTIVE: "insecure"
      alias: backend.local
      entrypoint:
        - "./bin/mill-calcite-backend-service"
      command:
        - ""
    - name: ${CI_REGISTRY_IMAGE}/clients-test-backend-server:${CI_COMMIT_REF_SLUG}
      pull_policy: always
      variables:
        SPRING_PROFILES_ACTIVE: "auth,tls"
      alias: backend-auth-tls.local
      entrypoint:
        - "./bin/mill-calcite-backend-service"
      command:
        - ""
    - name: ${CI_REGISTRY_IMAGE}/clients-test-backend-server:${CI_COMMIT_REF_SLUG}
      pull_policy: always
      variables:
        SPRING_PROFILES_ACTIVE: "auth"
      alias: backend-auth.local
      entrypoint:
        - "./bin/mill-calcite-backend-service"
      command:
        - ""
    - name: ${CI_REGISTRY_IMAGE}/clients-test-backend-server:${CI_COMMIT_REF_SLUG}
      pull_policy: always
      variables:
        SPRING_PROFILES_ACTIVE: "tls"
      alias: backend-tls.local
      entrypoint:
        - "./bin/mill-calcite-backend-service"
      command:
        - ""
  needs:
    - job: mill-clients:init-certs
      artifacts: true
    - job: mill:init-az-login
      artifacts: true
    - job: init:build-test-backend-service
      artifacts: false
    - job: mill-clients:init-version
      artifacts: true
  variables:
    MILL_HOST: backend.local
    MILL_PORT: "9099"
    MILL_AUTH_TLS_HOST: backend-auth-tls.local
    MILL_AUTH_TLS_PORT: "9099"
    MILL_AUTH_HOST: backend-auth.local
    MILL_AUTH_PORT: "9099"
    MILL_TLS_HOST: backend-tls.local
    MILL_TLS_PORT: "9099"
    TLS_CERT_CHAIN: "${CI_PROJECT_DIR}/.certs/client/client.pem"
    TLS_CERT_PK: "${CI_PROJECT_DIR}/.certs/client/client.key"
    TLS_ROOT_CA: "${CI_PROJECT_DIR}/etc/certs/ca.pem"
    CI_DEBUG_SERVICES: "true"
  before_script:
    - !reference [.global-vars, before_script]
    - mkdir -p ${CI_PROJECT_DIR}/.certs/client
    - openssl req -x509 -out ${TLS_CERT_CHAIN} -keyout ${TLS_CERT_PK} -newkey rsa:2048 -nodes -sha256 -subj '/CN=TESTUSER'
    - export MILL_JWT_TOKEN="$(cat ${CI_PROJECT_DIR}/etc/.test_az_token)"
    - find  ${CI_PROJECT_DIR}/etc/certs/


.mill-client:mill-py:test:
  extends: .mill:client-test
  script:    
    - !reference [.mill:client-test, before_script]
    - cd ${CI_PROJECT_DIR}/mill/clients/mill-py
    - pip install -r requirements.txt        
#    - python codegen.py
    - python -m unittest tests/*
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/mill/clients/mill-py
    when: always
    expire_in: "1 days"    


mill-client:mill-py:test-3.10:
  extends: .mill-client:mill-py:test
  image: python:3.10-slim  

mill-client:mill-py:test-3.11:
  extends: .mill-client:mill-py:test
  image: python:3.11-slim   

mill-client:mill-py:test-3.12:
  extends: .mill-client:mill-py:test
  image: python:3.12-slim

mill:jdbc-driver:test:
  extends: .mill:client-test
  stage: test
  image: azul/zulu-openjdk:17-latest
  script:
    - cd ${CI_PROJECT_DIR}/mill/clients
    - ../gradlew --no-daemon --console plain clean test testIT
 
mill-clients:install-dist:
  stage: build
  image: azul/zulu-openjdk:17-latest
  needs:
    - job: mill-clients:init-version
      artifacts: true    
  script:
    - cd ${CI_PROJECT_DIR}/mill/clients
    - ../gradlew --no-daemon --console plain clean installDist distTar distZip
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/mill/clients/*/build/install/**/*
      - ${CI_PROJECT_DIR}/mill/clients/*/build/distributions/*.tar
      - ${CI_PROJECT_DIR}/mill/clients/*/build/distributions/*.zip

mill-clients:mill-sql-line:build-docker:
  stage: publish
  extends: .docker-build-job
  variables:
    DOCKER_BUILD_CTX: ${CI_PROJECT_DIR}/mill/clients/mill-jdbc-shell
    DOCKER_BUILD_FILE: ${CI_PROJECT_DIR}/mill/clients/mill-jdbc-shell/src/main/docker/Dockerfile
    DOCKER_BUILD_CONTAINER_NAME : jdbc-shell
  needs:
    - job: mill-clients:install-dist
      artifacts: true
    - job: mill-clients:init-version
      artifacts: true
    - job: mill:jdbc-driver:test
      artifacts: false