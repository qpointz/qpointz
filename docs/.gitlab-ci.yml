include:
  - local : /.gitlab/vars.yml
  - local : /.gitlab/jobs.yml

image:
  name: $CI_IMAGE_SPHINX
  pull_policy: always

stages:
  - init
  - build

workflow:
  rules:
    - when : always

pages:init-version:
  stage: init
  extends: .init-next-version

pages:build-sphinx-ci-image:
  stage: init
  extends: .docker-build-job
  script:
    - >
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/etc/docker/sphinx-ci" 
      --build-arg "BASE_IMAGE=${CI_IMAGE_PYTHON}"
      --destination "${CI_IMAGE_SPHINX}"
      --cache=true          

pages:
  stage: build
  variables:
    GIT_STRATEGY: clone
  needs:
    - job: pages:init-version
      artifacts: true
    - job: pages:build-sphinx-ci-image
      artifacts: false

  before_script:
    - pip install semver
    - pip3 install semver
    - git fetch --all
    - >
       git branch --remote --format "%(refname:lstrip=3) %(refname:lstrip=2)" | 
       grep -v 'HEAD' | 
       xargs -l bash -c 'git branch $0 $1 2>/dev/null ||echo "$0 already exists"'    
    - git for-each-ref --format "%(refname)"  
    - git branch --remote --format "b:%(refname:lstrip=3)" | grep -v 'HEAD' > ${CI_PROJECT_DIR}/.versioner.in
    - git tag --format "t:%(refname:lstrip=2)"  >> ${CI_PROJECT_DIR}/.versioner.in
  script:       
    - versioner.py ${CI_PROJECT_DIR}/.versioner.in > ${CI_PROJECT_DIR}/.versioner.out
    - cat ${CI_PROJECT_DIR}/.versioner.out 
    - DOC_TAGS_WHITE_LIST=$(cat ${CI_PROJECT_DIR}/.versioner.out | sed -n '1p')
    - DOC_BRANCH_WHITE_LIST=$(cat ${CI_PROJECT_DIR}/.versioner.out | sed -n '2p') 
    - echo "smv_tag_whitelist=$DOC_TAGS_WHITE_LIST"
    - echo "smv_branch_whitelis=$DOC_BRANCH_WHITE_LIST"
    - >
      sphinx-multiversion 
      -D "smv_tag_whitelist=$DOC_TAGS_WHITE_LIST" 
      -D "smv_branch_whitelist=$DOC_BRANCH_WHITE_LIST" 
      ${CI_PROJECT_DIR}/docs/source ${CI_PROJECT_DIR}/docs/build
    - cd ${CI_PROJECT_DIR}/docs/build
    - |
      if git branch --remote --format "%(refname:lstrip=3)" | grep -E '\/'
      then  
        git branch --remote --format "%(refname:lstrip=3)" | grep -E '\/' | xargs -l bash -c 'mv $0 $(echo "$0" | sed '"'"'s/\//-/g'"'"' )'
      fi
    - find ${CI_PROJECT_DIR}/docs/build -empty -type d -delete    
    - ls -l ${CI_PROJECT_DIR}/docs/build
    - cat ${CI_PROJECT_DIR}/.versioner.out | sed -n '3p' > ${CI_PROJECT_DIR}/docs/build/versions.json
    - cat ${CI_PROJECT_DIR}/docs/build/versions.json
    - cd ${CI_PROJECT_DIR}/docs        
    - cp -R ./build/main/ ./out/    
    - cp -R ./build/* ./out/
    - mv ./out/main ./out/latest
    - cat ${CI_PROJECT_DIR}/docs/build/versions.json
    - cp ${CI_PROJECT_DIR}/docs/build/versions.json ./out
    - | 
      for i in ./out/* # iterate over all files in current dir
      do
          if [ -d "$i" ] 
          then
              cp ${CI_PROJECT_DIR}/docs/build/versions.json "$i"
          fi
      done    
    - mv ${CI_PROJECT_DIR}/docs/out/ ${CI_PROJECT_DIR}/public/
    - cd ${CI_PROJECT_DIR}
    - tar -czf ${CI_PROJECT_DIR}/docs.tar.gz -C ${CI_PROJECT_DIR} public/    
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/public
      - ${CI_PROJECT_DIR}/docs.tar.gz

# publishDocAndReports:
#   image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
#   stage: deploy
#   script:
#     - aws s3 rm --recursive s3://qpointz-cicd/$CI_COMMIT_REF_SLUG
#     - mkdir pub
#     - mkdir pub/docs && tar -xzf ./docs/build/docs-html.tar.gz  -C ./pub/docs --strip-components=2
#     - cp -R ./target/scalastyle/ ./pub/scalastyle
#     - mkdir pub/coverage && tar -xzvf ./target/scala-2.13/scoverage-report.tar.gz -C ./pub/coverage --strip-components=2
#     - aws s3 cp --recursive pub s3://qpointz-cicd/$CI_COMMIT_REF_SLUG
#     - rm -Rf ./pub