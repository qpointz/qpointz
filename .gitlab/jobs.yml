.global-vars:
    before_script:
        - export QP_VERSION="$(cat ${CI_PROJECT_DIR}/VERSION)"
        - export QP_UPDATE_LATEST_CONTAINER=false
        - |
           export QP_CONTAINER_TAG="${CI_COMMIT_REF_SLUG}"
           if [[ "dev" == "${CI_COMMIT_REF_SLUG}" ]]
           then
              export QP_CONTAINER_TAG="${QP_VERSION}-develop"
              export QP_UPDATE_LATEST_CONTAINER=false
           fi

           export QP_VERSION="$(cat ${CI_PROJECT_DIR}/VERSION)"
           
           if [[ "main" == "${CI_COMMIT_REF_SLUG}" ]]
           then              
              export QP_CONTAINER_TAG="${QP_VERSION}"
              export QP_UPDATE_LATEST_CONTAINER=true
           fi
        - >
          cat <<EOF
            QP_VERSION=${QP_VERSION}
            QP_CONTAINER_TAG=${QP_CONTAINER_TAG}
          EOF


.docker-base:
    image: 
        name: gcr.io/kaniko-project/executor:v1.23.2-debug
        entrypoint: [""]
    before_script:
      - mkdir -p /kaniko/.docker
      - >
          echo "{ \"auths\": {
          \"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n' )\"}
          ,\"https://index.docker.io/v1/\":{\"auth\":\"$(printf "%s:%s" "${DOCKER_HUB_USER}" "${DOCKER_HUB_PASSWORD}" | base64 | tr -d '\n')\"} 
          ,\"qpointzcr.azurecr.io\":{\"auth\":\"$(printf "%s:%s" "${AZ_CR_USERNAME}" "${AZ_CR_PASSWORD}" | base64 | tr -d '\n')\"}            
          }}" > /kaniko/.docker/config.json

.toolchain-docker-build:
    extends: .docker-base
    script:
      - export TOOLCHAIN_TAG="${CI_TOOLCHAIN_ROLL}-${CI_COMMIT_REF_SLUG}"
      - echo "TOOLCHAIN=${TOOLCHAIN_TAG}"
      - >
        /kaniko/executor
        --context ${CI_PROJECT_DIR}/etc/toolchain/${TOOLCHAIN_NAME}
        --dockerfile ${CI_PROJECT_DIR}/etc/toolchain/${TOOLCHAIN_NAME}/Dockerfile
        --destination ${CI_REGISTRY_IMAGE}/${TOOLCHAIN_NAME}:${TOOLCHAIN_TAG}
        --cache-dir ${CI_KANIKO_CACHE_DIR}/${TOOLCHAIN_NAME}
        --cache=true

.docker-build-job:
    extends: .docker-base    
    script:
      - !reference [.global-vars, before_script]
      - echo "VERSION:${QP_VERSION}"
      - export DOCKER_BUILD_TAG="v${QP_VERSION}"
      - |
        export DOCKER_DEST="--destination ${CI_REGISTRY_IMAGE}/${DOCKER_BUILD_CONTAINER_NAME}:${DOCKER_BUILD_TAG} "
        export DOCKER_DEST="${DOCKER_DEST} --destination ${CI_REGISTRY_IMAGE}/${DOCKER_BUILD_CONTAINER_NAME}:${CI_COMMIT_REF_SLUG} "
        if [ "$DOCKER_LOCAL_ONLY" != "true" ]
        then 
          echo "NON LOCAL PUBLISHING TO ${DOCKER_DEST}"
          if [ $CI_COMMIT_REF_PROTECTED == true ]
          then 
              export DOCKER_DEST="${DOCKER_DEST} --destination qpointz/${DOCKER_BUILD_CONTAINER_NAME}:${DOCKER_BUILD_TAG} "                
          fi
        else 
          echo "LOCAL ONLY"
        fi
      - echo ${DOCKER_DEST}
      - export DOCKER_BUILD_ARGS=" ${DOCKER_BUILD_ARGS} "
      - >
        /kaniko/executor
        --context "${DOCKER_BUILD_CTX}"
        --dockerfile "${DOCKER_BUILD_FILE}"
        --cache-dir "${CI_KANIKO_CACHE_DIR}/${DOCKER_BUILD_CONTAINER_NAME}" 
        $DOCKER_DEST
        $DOCKER_BUILD_ARGS
        --cache=true  
        
.init-next-version:
  image: ${CI_IMAGE_SEM_RELEASE}  
  variables:
    GIT_STRATEGY: clone
  needs:
    - job: ci-init
      artifacts: false
      optional: true
  script:
    - export QP_VERSION_SFX="-${CI_COMMIT_REF_SLUG}"
    - export REL_BRANCHES="--branches main,rc,$CI_COMMIT_REF_NAME"
    - |
        if [[ "main" == "${CI_COMMIT_REF_SLUG}" || "rc" == "${CI_COMMIT_REF_SLUG}" ]]
        then
          export QP_VERSION_SFX=""
          export REL_BRANCHES=""
        fi
    - echo "VERSION_SFX:${QP_VERSION_SFX}"
    - npx semantic-release ${REL_BRANCHES} --dry-run --no-ci --debug
    - echo $(cat ${CI_PROJECT_DIR}/VERSION)${QP_VERSION_SFX} > ${CI_PROJECT_DIR}/VERSION
    - echo "BUILD VERSION:$(cat ${CI_PROJECT_DIR}/VERSION)"
  artifacts:
    expire_in: "2 days"
    paths:
      - ${CI_PROJECT_DIR}/VERSION

.init-dev-certs:
  stage: init
  image: "${CI_IMAGE_MINICA}"
  script:         
    - cp -R /certs ${CI_PROJECT_DIR}/etc
  artifacts:    
    when: always
    expire_in: "1 days"
    paths:
      - ${CI_PROJECT_DIR}/etc/certs/**/*

.deploy-job:
  image: ${CI_REGISTRY_IMAGE}/deploy-tools:${CI_TOOLCHAIN_ROLL}-${CI_COMMIT_REF_SLUG}
  before_script:
    - az login -t $AZ_DEPLOY_SPN_TENANT_ID -u $AZ_DEPLOY_SPN_CLIENT_ID -p $AZ_DEPLOY_SPN_SECRET --service-principal
    - |-
      cat << HCL >  ${CI_PROJECT_DIR}/.tf.backend.tf
      resource_group_name="${TF_STATE_AZR_RG_NAME}"
      storage_account_name="${TF_STATE_AZR_SA_NAME}"
      container_name="${TF_STATE_AZR_SA_CONTAINER}"
      key="${TF_DEPLOY_NAME}_${CI_COMMIT_REF_SLUG}.tfstate"
      access_key="${TF_STATE_AZR_SA_KEY}"
      HCL
    - export TF_BACKEND_FILE=${CI_PROJECT_DIR}/.tf.backend.tf
    - |
      export TF_SLUG="${CI_COMMIT_REF_SLUG}"
      if [[ "true" == "${CI_COMMIT_REF_PROTECTED}" ]]
      then              
         export TF_SLUG="${CI_COMMIT_BRANCH}"         
      fi      